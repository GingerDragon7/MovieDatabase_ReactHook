{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","state","setState","apiurl","e","target","value","prevState","axios","then","data","id","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6PAgBeA,MAdf,YAA6C,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,OAChC,OACC,6BAAUC,UAAY,kBACrB,2BACCC,KAAK,OACLC,YAAc,wBACdF,UAAW,YACXG,SAAWL,EACXM,WAAaL,MCCFM,MATf,YAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACzB,OACC,yBAAKP,UAAW,SAASQ,QAAS,kBAAMD,EAAUD,EAAOG,UACxD,yBAAKC,IAAOJ,EAAOK,SACnB,gCAAML,EAAOM,MAAb,OCQYC,MAVf,YAA4C,IAAxBC,EAAuB,EAAvBA,QAAUP,EAAa,EAAbA,UAC7B,OACC,6BAAUP,UAAY,WACnBc,EAAQC,KAAI,SAAAT,GAAM,OACnB,kBAAE,EAAF,CAASU,IAAMV,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCU9CU,MAhBf,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC1B,OACE,6BAAUnB,UAAU,SACpB,yBAAKA,UAAU,WACd,4BAAMkB,EAASN,MAAf,IAAuB,kCAASM,EAASE,KAAlB,MACvB,uBAAGpB,UAAU,UAAb,YAAgCkB,EAASG,YACzC,yBAAMrB,UAAU,QACf,yBAAKU,IAAMQ,EAASP,SACpB,+BAAKO,EAASI,KAAd,MAED,4BAAQtB,UAAU,QAAQQ,QAASW,GAAnC,YCyDWI,MA9Df,WAAgB,IAAD,EACaC,mBAAS,CACjCC,EAAG,GACHX,QAAS,GACTI,SAAU,KAJC,mBACNQ,EADM,KACCC,EADD,KAMPC,EAAS,0CAwCf,OACE,yBAAK5B,UAAU,OACb,gCACE,+CAEF,8BACE,kBAAC,EAAD,CAAQF,YAhCM,SAAC+B,GACnB,IAAIJ,EAAII,EAAEC,OAAOC,MAEjBJ,GAAS,SAAAK,GACP,OAAO,2BAAKA,GAAZ,IAAuBP,EAAGA,QA4BW1B,OA5C1B,SAAC8B,GACC,UAAXA,EAAEb,KACJiB,IAAML,EAAS,MAAQF,EAAMD,GAAGS,MAAK,YAAe,IAC9CpB,EAD6C,EAAXqB,KAClBtC,OAEpB8B,GAAS,SAAAK,GACP,OAAO,2BAAMA,GAAb,IAAwBlB,QAASA,aAwCnC,kBAAC,EAAD,CAASA,QAASY,EAAMZ,QAASP,UA1BpB,SAAA6B,GACjBH,IAAML,EAAS,MAAQQ,GAAIF,MAAK,YAAe,IACzC5B,EADwC,EAAX6B,KAGjCE,QAAQC,IAAIhC,GAEZqB,GAAS,SAAAK,GACP,OAAO,2BAAKA,GAAZ,IAAuBd,SAAUZ,aAqBA,oBAAxBoB,EAAMR,SAASN,OAAwB,kBAAC,EAAD,CAAOM,SAAUQ,EAAMR,SAAUC,WAhBpE,WACjBQ,GAAS,SAAAK,GACP,OAAO,2BAAKA,GAAZ,IAAuBd,SAAU,cCrCnBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.841b65a9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Search ({  handleInput, search  }) {\r\n\treturn (\r\n\t\t< section className = \"searchbox-wrap\" >\r\n\t\t\t<input \r\n\t\t\t\ttype=\"text\" \r\n\t\t\t\tplaceholder = \"Search for a movie...\" \r\n\t\t\t\tclassName= \"searchbox\" \r\n\t\t\t\tonChange= {handleInput}\r\n\t\t\t\tonKeyPress ={search}\r\n\t\t\t/>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nfunction Result({ result, openPopup }) {\r\n\treturn (\r\n\t\t<div className= \"result\" onClick={() => openPopup(result.imdbID)}>\r\n\t\t\t<img src= { result.Poster} />\r\n\t\t\t<h3> {result.Title} </h3>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Result\r\n","import React from 'react'\r\n\r\nimport Result from './Result'\r\n\r\nfunction Results ({ results , openPopup }) {\r\n\treturn (\r\n\t\t< section className = \"results\" >\r\n\t\t\t{ results.map(result => (\r\n\t\t\t\t< Result key= {result.imdbID} result={result} openPopup={openPopup } />\r\n\t\t\t))}\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\n\r\nfunction Popup({ selected, closePopup }) {\r\n\treturn (\r\n\t\t < section className=\"popup\" >\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\t<h2>{ selected.Title } <span>({ selected.Year })</span></h2>\r\n\t\t\t\t<p className=\"rating\"> Rating: {selected.imdbRating}</p>\r\n\t\t\t\t< div className=\"plot\">\r\n\t\t\t\t\t<img src= {selected.Poster} />\r\n\t\t\t\t\t<p> {selected.Plot} </p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"close\" onClick={closePopup}>Close</button>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Popup\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios'\r\n\r\nimport Search from './components/Search'\r\nimport Results from './components/Results'\r\nimport Popup from './components/Popup'\r\n\r\nfunction App() {\r\n  const [state, setState] = useState({\r\n    s: \"\",\r\n    results: [],\r\n    selected: {}\r\n  });\r\n  const apiurl = \"http://www.omdbapi.com/?apikey=d20c1db3\";\r\n\r\n  const search = (e) => {\r\n    if (e.key ===  \"Enter\") {\r\n      axios(apiurl + \"&s=\" + state.s).then(({ data }) => {\r\n        let results =  data.Search;\r\n\r\n        setState(prevState => {\r\n          return { ... prevState, results: results }\r\n        })\r\n      });\r\n    }\r\n  }\r\n  \r\n  const handleInput = (e) => {\r\n    let s = e.target.value;\r\n\r\n    setState(prevState => {\r\n      return { ...prevState, s: s }\r\n    });\r\n  }\r\n\r\n  const  openPopup = id => {\r\n    axios(apiurl + \"&i=\" + id).then(({ data }) => {\r\n      let result = data;\r\n\r\n      console.log(result);\r\n\r\n      setState(prevState => {\r\n        return { ...prevState, selected: result }\r\n      });\r\n    });\r\n  }\r\n\r\n  const closePopup = () => {\r\n    setState(prevState => {\r\n      return { ...prevState, selected: {} }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Movie Database</h1>\r\n      </header>\r\n      <main>\r\n        <Search handleInput= {handleInput} search= {search} />\r\n\r\n        <Results results={state.results} openPopup = {openPopup} />\r\n\r\n        {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> : false}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}